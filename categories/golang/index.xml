<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on My Site</title>
    <link>localhost/categories/golang/</link>
    <description>Recent content in golang on My Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This is a customized copyright.</copyright>
    <lastBuildDate>Wed, 15 Nov 2023 20:23:08 -0400</lastBuildDate>
    <atom:link href="localhost/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>golang---5</title>
      <link>localhost/posts/golang--5/</link>
      <pubDate>Wed, 15 Nov 2023 20:23:08 -0400</pubDate>
      <guid>localhost/posts/golang--5/</guid>
      <description>映射 map内部无序 map初始化 // [key]value var a map[int]string //声明不会分配空间，必须用make初始化来分配空间 a = make(map[int]string, 10)//存放10个键值对，不传size大小默认分配一个 b := make(map[int]string) c := map[int]string{ 3425:&amp;#34;dff&amp;#34;, } map操作 //增加 map[&amp;#34;key&amp;#34;] = value //删除 delete(map, &amp;#34;key&amp;#34;) //查找 value, bool = map[key] //遍历 for k,v := range b{ } //二重map a := make(map[string]map[int]string) a[&amp;#34;11&amp;#34;] = make(map[int]string) a[&amp;#34;11&amp;#34;][1] = &amp;#34;xx&amp;#34; a[&amp;#34;22&amp;#34;] = make(map[int]string) a[&amp;#34;22&amp;#34;][1] = &amp;#34;tt&amp;#34; 面向对象 golang基于结构体实现OOP特性
定义 type Teacher struct { Name string Age int School string } //初始化 func main(){ //第一种赋值方式 var x Teacher x.</description>
    </item>
    <item>
      <title>golang---4</title>
      <link>localhost/posts/golang--4/</link>
      <pubDate>Tue, 14 Nov 2023 21:26:08 -0400</pubDate>
      <guid>localhost/posts/golang--4/</guid>
      <description>数组 //定义： var a [5]int //遍历(普通for循环) for i := 0; i &amp;lt; len(a); i ++{} //遍历（键值循环） for key, val := range a{} //初始化 //第一种 var a[3]int = [3]int{1, 2, 3} //第二种 var a = [3]int{1, 2, 3} //第三种 var a = [...]int{1, 2, 3, 4} //第四种 var a = [...]int{2:66, 0:22, 1:66, 3:54} 长度属于类型的一部分 Go数组是值类型，拷贝或者传参时默认值传递 //默认初始化为全0 var arr [2][3]int16 //初始化操作 var arr1 [2][3]int = [2][3]int{{1, 2, 3},{4, 5, 6}} //遍历 //方式1：普通for循环 for i := 0; i &amp;lt; len(arr); i ++{ for j:= 0; j &amp;lt; len(arr[i]); i ++{ } } //方式2：键值循环 for key, value := range arr{ for k,v := range value{ } } 切片 //定义切片方式1 var intarr [6]int = [6]int{1, 2, 3, 4, 5, 6} //索引：从1开始，到3结束（不包含3） var slice []int = intarr[1:3] //定义切片方式2：, 参数表示，1、切片类型，2、切片长度，3、切片容量 slice := make([]int, 4, 20) //定义切片方式3：指定具体数组 slice2 := []int{1, 2, 3} //切片遍历 //方式1：普通for循环 for i := 0; i &amp;lt; len(slice); i ++{ } //方式2：键值循环 for key, value := range slice{ } 切片底层由三部分组成：一个指向底层数组的指针，一个切片的长度，一个切片的容量</description>
    </item>
    <item>
      <title>golang---3</title>
      <link>localhost/posts/golang--3/</link>
      <pubDate>Mon, 13 Nov 2023 21:26:08 -0400</pubDate>
      <guid>localhost/posts/golang--3/</guid>
      <description>包 导入包时，要把包的所在文件路径import进来 一个目录下的同级文件同属于一个包 对包起别名后，原名字失效 import( test &amp;#34;fmt&amp;#34; ) //这里用test给fmt起别名，在下面的程序中也就只能使用test init函数 初始化函数，每个源文件都能包含init函数，在main函数之前，被GO运行框架调用 执行顺序：全局变量定义 &amp;gt; init函数 &amp;gt; main函数 多个源文件都有init函数，则按照main.go中的import顺序来执行 匿名函数 使用场景：只用一次（也可以多次使用（给全局变量），但不常用这种方式） result := func(num1 int, num2, int) int{ return num1 + num2 }(10, 20) 闭包 //getsum参数为空 func getsum() func(int) int{ var sum int = 0 return func(num int) int{ sum += num return sum } } //闭包：返回的匿名函数 + 匿名函数以外的变量num 本质依旧是一个匿名函数，只是这个匿名函数引入外界的变量或者参数 特点： 闭包中使用的变量会一直保存在内存中，所以闭包不可以滥用 什么情况下使用闭包 ​	闭包可以保留上次引用的某个值，我们传入一次就可以反复使用
defer 为了在函数执行完毕后及时释放资源
func add(num1 int, num2 int) int{ //golang中遇到defer，会将defer中的语句压入栈，然后继续执行后面的语句 defer fmt.</description>
    </item>
    <item>
      <title>golang---2</title>
      <link>localhost/posts/golang--2/</link>
      <pubDate>Wed, 08 Nov 2023 20:07:08 -0400</pubDate>
      <guid>localhost/posts/golang--2/</guid>
      <description>字符串 没有特殊字符
使用双引号
有特殊字符
可以用反引号
类型转换 golang中需要手动转换类型，没有自动转换
基本数据类型转string var n1 int = 10 var s1 string = fmt.Sprintf(&amp;#34;%d&amp;#34;, n1) var s2 string = strconv.FormatInt(int64(n1), 10) //没有s1简单，其中需要强制转换 string类型转其他类型 var b bool b, _ = strconv.ParseBool(s1) num, _ = strconv.ParseInt(n1, in, 64) 循环 for range键值循环 var str string = &amp;#34;hello golang&amp;#34; for i, value := range str{ fmt.Printf(i, value) } 函数 golang函数不支持重载
golang函数支持可变参数
func test(args...int){} //可以传入任意多个int类型的数据a Go中，函数也是一种数据类型，可以被复制给变量 也可以把函数当形参 type命名 func test(num int){} func test02(num1 int, num2 float32, testFunc func(int)){} func main(){ a := test a(10) //等价于test(10) test02(10, 2.</description>
    </item>
    <item>
      <title>golang---1</title>
      <link>localhost/posts/golang--1/</link>
      <pubDate>Tue, 07 Nov 2023 13:48:08 -0400</pubDate>
      <guid>localhost/posts/golang--1/</guid>
      <description>风格 1、行注释
2、一行不超过80个字符，使用逗号换行
变量和数据类型 1、定义变量 ​	1、var age int = 18
​	2、var age int //默认给0
​	3、var age = &amp;ldquo;18&amp;rdquo; //自动判断类型
​	4、age := &amp;ldquo;boy&amp;rdquo; //省略var
​	5、一次性声明
​	var(
​	n9 = 500
​	n10 = &amp;ldquo;fcv&amp;rdquo;
​	)
2、字符类型 用byte来存储字符类型
var x byte = &amp;lsquo;a&amp;rsquo;
其底层按照Unicode码存储，ASCII码是Unicode码的前几位
要显示字符，要格式化输出
fmt.printf(&amp;quot;%c&amp;quot;, x)</description>
    </item>
  </channel>
</rss>
